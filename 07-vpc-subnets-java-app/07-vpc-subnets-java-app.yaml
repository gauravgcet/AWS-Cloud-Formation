AWSTemplateFormatVersion: '2010-09-09'
Description: 'scale up/down the application instance at schedule time'
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.nano
      - t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  RegionMap:
    eu-west-2:
      AMI: ami-00a1896be20551dc8
Resources:
  # VPC with private & public subnet, Internet gateway
  AVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value:  !Join ['', [!Ref "AWS::StackName", "-VPC" ]]
  AInternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: AVPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    # Notice how you can't attach an IGW to a VPC unless both are created:
    Properties:
      VpcId: !Ref AVPC
      InternetGatewayId: !Ref AInternetGateway

  # front end subnet will be public
  FrontendSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AVPC
      CidrBlock: 10.1.10.0/24
      AvailabilityZone: 'eu-west-2a'
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", " frontend subnet" ]]

  # Route tables for A-VPC:
  FrontendRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AVPC
      Tags:
        - Key: Name
          Value: FrontendRouteTable
  # Public route table has direct routing to IGW:
  FrontendPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref FrontendRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref AInternetGateway

  # Attach the frontend subnet to public route tables,
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref FrontendSubnet
      RouteTableId: !Ref FrontendRouteTable

  # backend subnet will be private
  BackendSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AVPC
      CidrBlock: 10.1.50.0/24
      AvailabilityZone: 'eu-west-2a'
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", " backend subnet" ]]

  # Backend route table, this going to be private
  BackendPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AVPC
      Tags:
        - Key: Name
          Value: BackendRouteTable

  # Private route table can access web via NAT (created below)
  BackendPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref BackendPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      # Otherwise if we are using a NAT Gateway, route traffic through the NAT Gateway:
      NatGatewayId:  !Ref ANATGateway

  BackendSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BackendSubnet
      RouteTableId: !Ref BackendPrivateRouteTable

  # A NAT Gateway to be frontend subnet and backend subnet will have route by NAT gateway to internet
  ANATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref FrontendSubnet
      Tags:
        - Key: Name
          Value: !Sub NAT-${AWS::StackName}
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC

